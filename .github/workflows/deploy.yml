name: Update version on `Nomad` cluster

on:
  push:
    # branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      service_version:
        description: 'Use version of service in format "{major}.{minor}.{patch}"'
        required: true
        type: string
        
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Install `jq`
      run: sudo apt install jq
    - name: Setup `nomad`
      uses: hashicorp/setup-nomad@main
      id: setup
      with:
        version: ${{ vars.ENV_NOMAD_VERSION }}
    - name: Extract version from git tag
      if: github.event_name == 'push'
      id: get-tag
      run: |
        tag=$(echo ${{  github.ref_name }} | cut -dv -f2)
        echo "::set-output name=tag::$tag"
    - run: echo "${{ steps.get-tag.outputs.tag && steps.get-tag.outputs.tag || github.event.inputs.service_version }}"
    - name: Extrtact version meta
      env:
        NOMAD_ADDR: ${{ vars.ENV_NOMAD_ADDR }}
      run: nomad var get -token=${{ secrets.ENV_NOMAD_TOKEN }} -namespace=${{ vars.ENV_NOMAD_NAMESPACE }} -out=json ${{ vars.ENV_NOMAD_VARIABLE_VERSION_META }} > version.meta.json
    - run: cat version.meta.json
    - name: Set new version value
      env:
        VERSION_VALUE: ${{ steps.get-tag.outputs.tag && steps.get-tag.outputs.tag || github.event.inputs.service_version }}
      run: jq '.Items.${{ vars.ENV_VERSION_META_NAME }} = "${{ env.VERSION_VALUE }}"' <<< $(cat version.meta.json) > version.meta.json
    - run: cat version.meta.json
    - name: Update version meta
      env:
        NOMAD_ADDR: ${{ vars.ENV_NOMAD_ADDR }}
      run: nomad var put -token=${{ secrets.ENV_NOMAD_TOKEN }} -namespace=${{ vars.ENV_NOMAD_NAMESPACE }} @version.meta.json
    - name: Restart job
      env:
        NOMAD_ADDR: ${{ vars.ENV_NOMAD_ADDR }}
      run: nomad job restart -reschedule -on-error=fail -token=${{ secrets.ENV_NOMAD_TOKEN }} -namespace=${{ vars.ENV_NOMAD_NAMESPACE }} ${{ vars.ENV_NOMAD_JOB }}
