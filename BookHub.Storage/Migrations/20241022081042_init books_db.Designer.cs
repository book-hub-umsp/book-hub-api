// <auto-generated />
using System;
using BookHub.Models.Books;
using BookHub.Storage.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookHub.Storage.Migrations
{
    [DbContext(typeof(BooksContext))]
    [Migration("20241022081042_init books_db")]
    partial class initbooks_db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookHub.Storage.PostgreSQL.Models.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("BookHub.Storage.PostgreSQL.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("BookAnnotation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("book_annotation");

                    b.Property<BookGenre>("BookGenre")
                        .HasColumnType("book_genre")
                        .HasColumnName("book_genre");

                    b.Property<BookStatus>("BookStatus")
                        .HasColumnType("book_status")
                        .HasColumnName("book_status");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTimeOffset>("LastEditDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_edit_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("BookHub.Storage.PostgreSQL.Models.KeyWord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.HasKey("Id")
                        .HasName("pk_key_words");

                    b.ToTable("key_words", (string)null);
                });

            modelBuilder.Entity("BookHub.Storage.PostgreSQL.Models.KeyWordLink", b =>
                {
                    b.Property<long>("KeyWordId")
                        .HasColumnType("bigint")
                        .HasColumnName("key_word_id");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.HasKey("KeyWordId", "BookId")
                        .HasName("pk_keywords_links");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_keywords_links_book_id");

                    b.ToTable("keywords_links", (string)null);
                });

            modelBuilder.Entity("BookHub.Storage.PostgreSQL.Models.Book", b =>
                {
                    b.HasOne("BookHub.Storage.PostgreSQL.Models.Author", null)
                        .WithMany("WrittenBooks")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_books_authors_id");
                });

            modelBuilder.Entity("BookHub.Storage.PostgreSQL.Models.KeyWordLink", b =>
                {
                    b.HasOne("BookHub.Storage.PostgreSQL.Models.Book", "Book")
                        .WithMany("KeywordsLinks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_keywords_links_books_book_id");

                    b.HasOne("BookHub.Storage.PostgreSQL.Models.KeyWord", "KeyWord")
                        .WithMany("BooksLinks")
                        .HasForeignKey("KeyWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_keywords_links_key_words_key_word_id");

                    b.Navigation("Book");

                    b.Navigation("KeyWord");
                });

            modelBuilder.Entity("BookHub.Storage.PostgreSQL.Models.Author", b =>
                {
                    b.Navigation("WrittenBooks");
                });

            modelBuilder.Entity("BookHub.Storage.PostgreSQL.Models.Book", b =>
                {
                    b.Navigation("KeywordsLinks");
                });

            modelBuilder.Entity("BookHub.Storage.PostgreSQL.Models.KeyWord", b =>
                {
                    b.Navigation("BooksLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
